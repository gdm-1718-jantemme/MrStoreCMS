{"version":3,"sources":["db.js","App.jsx","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","App","useState","activiaAmount","setActiviaAmount","cerealAmount","setCerealAmount","mugsAmount","setMugsAmount","pringlesPurpleAmount","setPringlesPurpleAmount","pringlesRedAmount","setPringlesRedAmount","errorContent","setError","useEffect","readDb","checkTotalAmount","ref","once","then","snapshot","amounts","val","activia","cereal","mugs","pringlesPurple","pringlesRed","className","handleInputChange","event","target","value","name","parseInt","onSubmit","e","preventDefault","set","alert","method","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAYAA,gBAVqB,CACjBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAIX,IAEeC,EAFJR,aC2IIS,EAnJH,WAAO,IAAD,EAEyBC,mBAAS,GAFlC,mBAEVC,EAFU,KAEKC,EAFL,OAGuBF,mBAAS,GAHhC,mBAGVG,EAHU,KAGIC,EAHJ,OAImBJ,mBAAS,GAJ5B,mBAIVK,EAJU,KAIEC,EAJF,OAKuCN,mBAAS,GALhD,mBAKVO,EALU,KAKYC,EALZ,OAMiCR,mBAAS,GAN1C,mBAMVS,EANU,KAMSC,EANT,OAQgBV,mBAAS,IARzB,mBAQVW,EARU,KAQIC,EARJ,KAYjBC,qBAAU,WACTC,MACC,IAEFD,qBAAU,WACTE,MACC,CAACd,EAAeE,EAAcE,EAAYI,EAAmBD,IAE/D,IAWMM,EAAS,WACdhB,EAAGkB,IAAI,iBAAiBC,KAAK,SAC5BC,MAAK,SAASC,GACd,IAAIC,EAAUD,EAASE,MACvBnB,EAAiBkB,EAAQE,SACzBlB,EAAgBgB,EAAQG,QACxBjB,EAAcc,EAAQI,MACtBhB,EAAwBY,EAAQK,gBAChCf,EAAqBU,EAAQM,iBAYzBX,EAAmB,WAGvBH,EAFiBX,EAAgBE,EAAeE,EAAaI,EAAoBF,EAClE,GACN,uBAAGoB,UAAU,SAAb,iCAEA,KAGLC,EAAoB,SAACC,GAC1B,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MAGrB,OAFaD,EAAOE,MAGnB,IAAK,gBACJ9B,EAAiB+B,SAASF,IAC1B,MAED,IAAK,eACJ3B,EAAgB6B,SAASF,IACzB,MAED,IAAK,aACJzB,EAAc2B,SAASF,IACvB,MAED,IAAK,uBACJvB,EAAwByB,SAASF,IAClC,MAEA,IAAK,oBACJrB,EAAqBuB,SAASF,MAU9B,OACI,yBAAKJ,UAAU,OACpB,gCACC,0CAGD,0BAAMO,SAvDa,SAACC,GACrBA,EAAEC,iBACkB,KAAjBzB,GAxBHb,EAAGkB,IAAI,iBAAiBqB,IAAI,CAC3Bf,QAASrB,EACTsB,OAAQpB,EACRqB,KAAMnB,EACNoB,eAAgBlB,EAChBmB,YAAajB,IAEd6B,MAAM,+BAoBLA,MAAM,wBAkDwBC,OAAO,QACpC,uDACC5B,EACA,gDAEC,2BACCqB,KAAK,gBACLQ,KAAK,SACLT,MAAO9B,EACPwC,SAAUb,KAEZ,mDAEC,2BACCI,KAAK,eACLQ,KAAK,SACLT,MAAO5B,EACPsC,SAAUb,KAEZ,+CAEC,2BACCI,KAAK,aACLQ,KAAK,SACLT,MAAO1B,EACPoC,SAAUb,KAEZ,wDAEC,2BACCI,KAAK,uBACLQ,KAAK,SACLT,MAAOxB,EACPkC,SAAUb,KAEZ,sDAEC,2BACCI,KAAK,oBACLQ,KAAK,SACLT,MAAOtB,EACPgC,SAAUb,KAEZ,2BAAOD,UAAU,SAASa,KAAK,SAAST,MAAM,eCtI/BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.0b22d57e.chunk.js","sourcesContent":["import * as firebase from 'firebase'\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyCIEi_QxG_hGVRD05ajobZqE69l8dz6TeE\",\n    authDomain: \"storecms-ff5f8.firebaseapp.com\",\n    databaseURL: \"https://storecms-ff5f8.firebaseio.com\",\n    projectId: \"storecms-ff5f8\",\n    storageBucket: \"storecms-ff5f8.appspot.com\",\n    messagingSenderId: \"173022818895\",\n    appId: \"1:173022818895:web:260f56148454cdebddb03a\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\nconst db = firebase.database()\n\nexport default db","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport db from './db'\n\nconst App = () => {\n\n\tconst [activiaAmount, setActiviaAmount] = useState(0)\n\tconst [cerealAmount, setCerealAmount] = useState(0)\n\tconst [mugsAmount, setMugsAmount] = useState(0)\n\tconst [pringlesPurpleAmount, setPringlesPurpleAmount] = useState(0)\n\tconst [pringlesRedAmount, setPringlesRedAmount] = useState(0)\n\n\tconst [errorContent, setError] = useState(\"\")\n\n\tconst maxItems = 36\n\n\tuseEffect(() => {\n\t\treadDb()\n\t},[])\n\n\tuseEffect(() => {\n\t\tcheckTotalAmount()\n\t},[activiaAmount, cerealAmount, mugsAmount, pringlesRedAmount, setPringlesPurpleAmount])\n\n\tconst writeDb = () => {\n\t\tdb.ref('store/amounts').set({\n\t\t\tactivia: activiaAmount,\n\t\t\tcereal: cerealAmount,\n\t\t\tmugs: mugsAmount,\n\t\t\tpringlesPurple: pringlesPurpleAmount,\n\t\t\tpringlesRed: pringlesRedAmount\n\t\t});\n\t\talert(\"Store updated succesfully.\")\n\t}\n\n\tconst readDb = () => {\n\t\tdb.ref('store/amounts').once('value')\n\t\t.then(function(snapshot) {\n\t\t\tlet amounts = snapshot.val()\n\t\t\tsetActiviaAmount(amounts.activia)\n\t\t\tsetCerealAmount(amounts.cereal)\n\t\t\tsetMugsAmount(amounts.mugs)\n\t\t\tsetPringlesPurpleAmount(amounts.pringlesPurple)\n\t\t\tsetPringlesRedAmount(amounts.pringlesRed)\n\t\t  });\n\t}\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tif(errorContent === \"\")\n\t\t\twriteDb()\n\t\telse\n\t\t\talert(\"Something is wrong.\")\n\t}\n\n\tconst checkTotalAmount = () => {\n\t\tlet totalItmes = (activiaAmount + cerealAmount + mugsAmount + pringlesRedAmount + pringlesPurpleAmount)\n\t\tif(totalItmes > 36) {\n\t\t\tsetError(<p className=\"error\">Too much items. 36 total max.</p>)\n\t\t} else \n\t\t\tsetError(\"\")\n\t}\n\n\tconst handleInputChange = (event) => {\n\t\tconst target = event.target\n\t\tconst value = target.value\n\t\tconst name = target.name\n\n\t\tswitch(name) {\n\t\t\tcase \"activiaAmount\":\n\t\t\t\tsetActiviaAmount(parseInt(value))\n\t\t\t\tbreak\n\n\t\t\tcase \"cerealAmount\":\n\t\t\t\tsetCerealAmount(parseInt(value))\n\t\t\t\tbreak\n\n\t\t\tcase \"mugsAmount\":\n\t\t\t\tsetMugsAmount(parseInt(value))\n\t\t\t\tbreak\n\n\t\t\tcase \"pringlesPurpleAmount\":\n\t\t\t\tsetPringlesPurpleAmount(parseInt(value))\n\t\t\tbreak\n\n\t\t\tcase \"pringlesRedAmount\":\n\t\t\t\tsetPringlesRedAmount(parseInt(value))\n\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t\n\t}\n\n    return (\n        <div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<h1>Store CMS</h1>\n\t\t\t</header>\n\t\t\t\n\t\t\t<form onSubmit={handleSubmit} method=\"post\">\n\t\t\t\t<h2>Aantal items op display</h2>\n\t\t\t\t{errorContent}\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAantal Activia\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"activiaAmount\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tvalue={activiaAmount}\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAantal Cornflakes\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"cerealAmount\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tvalue={cerealAmount}\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAantal Tassen\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"mugsAmount\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tvalue={mugsAmount}\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAantal Paarse Pringles\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"pringlesPurpleAmount\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tvalue={pringlesPurpleAmount}\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAantal Rode Pringles\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"pringlesRedAmount\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tvalue={pringlesRedAmount}\n\t\t\t\t\t\t\tonChange={handleInputChange}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<input className='button' type=\"submit\" value=\"Opslaan\" />\n\t\t\t\t</form>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}